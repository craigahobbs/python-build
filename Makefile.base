# -*- makefile-gmake -*-
# Licensed under the MIT License
# https://github.com/craigahobbs/python-build/blob/main/LICENSE

# python-build - https://github.com/craigahobbs/python-build#readme

.DEFAULT_GOAL := help


# Python docker images with which to run unit tests
ifeq '$(NO_DOCKER)' ''
PYTHON_IMAGES ?= \
    python:3.11 \
    python:3.12-rc \
    python:3.10 \
    python:3.9 \
    python:3.8

# Exclude Python docker images
PYTHON_IMAGES := $(foreach IMAGE,$(PYTHON_IMAGES),$(if $(findstring $(IMAGE),$(PYTHON_IMAGES_EXCLUDE)),,$(IMAGE)))
else
PYTHON_IMAGES := no-docker
endif

# Python pip option
PIP_ARGS ?= -q --no-cache-dir
PIP_INSTALL_ARGS ?= --progress-bar off --retries 2 --timeout 5

# Python unittest
UNITTEST_ARGS ?= -v

# unittest-parallel
UNITTEST_PARALLEL ?=
UNITTEST_PARALLEL_VERSION ?= 1.6.*
UNITTEST_PARALLEL_ARGS ?= -v
UNITTEST_PARALLEL_COVERAGE_ARGS ?= --coverage-branch --coverage-fail-under 100

# coverage
COVERAGE_VERSION ?= 7.3.*
COVERAGE_ARGS ?= --branch
COVERAGE_REPORT_ARGS ?= --fail-under 100

# pylint
PYLINT_VERSION ?= 2.17.*
PYLINT_ARGS ?= -j 0

# sphinx
SPHINX_DOC ?=
SPHINX_VERSION ?= 7.2.*
SPHINX_ARGS ?= -W -a

# gh-pages source paths
GHPAGES_SRC ?= $(if $(SPHINX_DOC),build/doc/html/)

# Helper functions
IMAGE_NAME_FN = $(subst .,-,$(subst :,-,$(strip $(1))))
VENV_RUN_FN = $(if $(NO_DOCKER),,docker run -i --rm -u `id -g`:`id -g` -v `pwd`:`pwd` -w `pwd` $(strip $(1)))

# Default venv command prefix (e.g. "$(DEFAULT_VENV_CMD)/python3")
DEFAULT_VENV_CMD := $(call VENV_RUN_FN, $(firstword $(PYTHON_IMAGES))) build/venv/$(call IMAGE_NAME_FN, $(firstword $(PYTHON_IMAGES)))/bin


.PHONY: _help help
help: _help
_help:
	@echo 'usage: make [changelog|clean|commit|cover|doc|gh-pages|lint|publish|superclean|test]'


.PHONY: _clean clean
clean: _clean
_clean:
	rm -rf build/ dist/ .coverage src/*.egg-info $$(find src -name __pycache__)


.PHONY: _superclean superclean
superclean: clean _superclean
_superclean:
ifeq '$(NO_DOCKER)' ''
	-docker rmi -f $(PYTHON_IMAGES)
endif


.PHONY: commit
commit: test lint doc cover


# Function to generate venv creation rules - docker_image, packages, suffix
define VENV_RULE_FN
build/venv/$(call IMAGE_NAME_FN, $(1))$(strip $(3)).build:
ifeq '$$(NO_DOCKER)' ''
	if [ "$$$$(docker images -q $(strip $(1)))" = "" ]; then docker pull -q $(strip $(1)); fi
endif
	$(call VENV_RUN_FN, $(1)) python3 -m venv build/venv/$(call IMAGE_NAME_FN, $(1))$(strip $(3))
	$(call VENV_RUN_FN, $(1)) build/venv/$(call IMAGE_NAME_FN, $(1))$(strip $(3))/bin/pip $$(PIP_ARGS) install $$(PIP_INSTALL_ARGS) -U pip setuptools
	$(call VENV_RUN_FN, $(1)) build/venv/$(call IMAGE_NAME_FN, $(1))$(strip $(3))/bin/pip $$(PIP_ARGS) install $$(PIP_INSTALL_ARGS) $(strip $(2))
	touch $$@
endef
$(eval $(call VENV_RULE_FN, $(firstword $(PYTHON_IMAGES)), -e . $$(TESTS_REQUIRE)$(if $(UNITTEST_PARALLEL), unittest-parallel=="$(UNITTEST_PARALLEL_VERSION)") \
    coverage=="$$(COVERAGE_VERSION)" pylint=="$$(PYLINT_VERSION)"$(if $(SPHINX_DOC), sphinx=="$$(SPHINX_VERSION)")))
$(foreach IMAGE, $(wordlist 2, $(words $(PYTHON_IMAGES)), $(PYTHON_IMAGES)), \
    $(eval $(call VENV_RULE_FN, $(IMAGE), -e . $$(TESTS_REQUIRE)$(if $(UNITTEST_PARALLEL), unittest-parallel=="$(UNITTEST_PARALLEL_VERSION)"))))


# Function to generate command rules - command_name, docker_image, commands, suffix
define VENV_COMMAND_FN
.PHONY: $(strip $(1))-$(call IMAGE_NAME_FN,$(2))$(strip $(4))
$(strip $(1))-$(call IMAGE_NAME_FN,$(2))$(strip $(4)): build/venv/$(call IMAGE_NAME_FN, $(2))$(strip $(4)).build
$(call $(3), $(call VENV_RUN_FN, $(2)) build/venv/$(call IMAGE_NAME_FN, $(2))$(strip $(4))/bin)

.PHONY: $(strip $(1))
$(strip $(1)): $(strip $(1))-$(call IMAGE_NAME_FN,$(2))$(strip $(4))
endef


define TEST_COMMANDS_FN
ifneq '$$(TEST)' ''
	$(1)/python3 -m unittest $$(UNITTEST_ARGS) $$(TEST)
else ifneq '$$(UNITTEST_PARALLEL)' ''
	$(1)/unittest-parallel -t src/ -s src/tests/ $$(UNITTEST_PARALLEL_ARGS)
else
	$(1)/python3 -m unittest discover -t src/ -s src/tests/ $$(UNITTEST_ARGS)
endif
endef
$(foreach IMAGE, $(PYTHON_IMAGES), $(eval $(call VENV_COMMAND_FN, test, $(IMAGE), TEST_COMMANDS_FN)))


define COVER_COMMANDS_FN
ifneq '$$(TEST)' ''
	$(1)/python3 -m coverage run --source src/ $$(COVERAGE_ARGS) -m unittest $$(UNITTEST_ARGS) $$(TEST)
	$(1)/python3 -m coverage html -d build/coverage
	$(1)/python3 -m coverage report $$(COVERAGE_REPORT_ARGS)
else ifneq '$$(UNITTEST_PARALLEL)' ''
	$(1)/unittest-parallel -t src/ -s src/tests/ $$(UNITTEST_PARALLEL_ARGS) --coverage-html=build/coverage $$(UNITTEST_PARALLEL_COVERAGE_ARGS)
else
	$(1)/python3 -m coverage run --source src/ $$(COVERAGE_ARGS) -m unittest discover -t src/ -s src/tests/ $$(UNITTEST_ARGS)
	$(1)/python3 -m coverage html -d build/coverage
	$(1)/python3 -m coverage report $$(COVERAGE_REPORT_ARGS)
endif
endef
$(eval $(call VENV_COMMAND_FN, cover, $(firstword $(PYTHON_IMAGES)), COVER_COMMANDS_FN))


define LINT_COMMANDS_FN
	$(1)/python3 -m pylint $$(PYLINT_ARGS) src
endef
$(eval $(call VENV_COMMAND_FN, lint, $(firstword $(PYTHON_IMAGES)), LINT_COMMANDS_FN))


.PHONY: doc
ifneq '$(SPHINX_DOC)' ''
define DOC_COMMANDS_FN
	$(1)/sphinx-build $$(SPHINX_ARGS) -b doctest -d build/doc/doctrees/ $$(SPHINX_DOC) build/doc/doctest/
	$(1)/sphinx-build $$(SPHINX_ARGS) -b html -d build/doc/doctrees/ $$(SPHINX_DOC) build/doc/html/
endef
$(eval $(call VENV_COMMAND_FN, doc, $(firstword $(PYTHON_IMAGES)), DOC_COMMANDS_FN))
endif


.PHONY: _gh-pages gh-pages
ifneq '$(GHPAGES_SRC)' ''
gh-pages: _gh-pages
_gh-pages: commit
	if [ ! -d ../$(notdir $(CURDIR)).gh-pages ]; then git clone -b gh-pages `git config --get remote.origin.url` ../$(notdir $(CURDIR)).gh-pages; fi
	cd ../$(notdir $(CURDIR)).gh-pages && git pull
	rsync -rv --delete --exclude=.git/ $(GHPAGES_SRC) ../$(notdir $(CURDIR)).gh-pages
	touch ../$(notdir $(CURDIR)).gh-pages/.nojekyll
endif


$(eval $(call VENV_RULE_FN, $(firstword $(PYTHON_IMAGES)), build simple-git-changelog twine wheel, -util))


.PHONY: _publish publish
publish: _publish
_publish: commit
define PUBLISH_COMMANDS_FN
	rm -rf dist/
	$(1)/python3 -m build -n
	$(1)/twine check dist/*
	$(1)/twine upload dist/*
endef
$(eval $(call VENV_COMMAND_FN, publish, $(firstword $(PYTHON_IMAGES)), PUBLISH_COMMANDS_FN, -util))


define CHANGELOG_COMMANDS_FN
	$(1)/simple-git-changelog
endef
$(eval $(call VENV_COMMAND_FN, changelog, $(firstword $(PYTHON_IMAGES)), CHANGELOG_COMMANDS_FN, -util))
