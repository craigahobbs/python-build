# -*- makefile-gmake -*-
# Licensed under the MIT License
# https://github.com/craigahobbs/python-build/blob/master/LICENSE

ifeq '$(PYTHON_VERSIONS)' ''
    $(error PYTHON_VERSIONS is not defined!)
endif

# Python pip option
PIP_ARGS ?= --no-cache-dir --disable-pip-version-check
PIP_INSTALL_ARGS ?= --progress-bar off

# coverage
COVERAGE_VERSION ?= 5.5
COVERAGE_REPORT_ARGS ?= --fail-under 100

# pylint
PYLINT_VERSION ?= 2.7.4
PYLINT_ARGS ?= -j 0

# sphinx
SPHINX_VERSION ?= 3.5.3
SPHINX_RTD_THEME_VERSION ?= 0.5.1
DOCUTILS_VERSION ?= 0.16
SPHINX_ARGS ?= -W -a

# Build directory
BUILD := build

# Helper functions
LOWER_FN = $(strip $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,\
    $(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,\
    $(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$(1))))))))))))))))))))))))))))
UPPER_FN = $(strip $(subst a,A,$(subst b,B,$(subst c,C,$(subst d,D,$(subst e,E,$(subst f,F,$(subst g,G,$(subst h,H,$(subst i,I,\
    $(subst j,J,$(subst k,K,$(subst l,L,$(subst m,M,$(subst n,N,$(subst o,O,$(subst p,P,$(subst q,Q,$(subst r,R,$(subst s,S,\
    $(subst t,T,$(subst u,U,$(subst v,V,$(subst w,W,$(subst x,X,$(subst y,Y,$(subst z,Z,$(1))))))))))))))))))))))))))))
PYTHON_VERSION_FN = $(if $(strip $(1)),$(strip $(1)),$(firstword $(PYTHON_VERSIONS)))
PYTHON_NAME_FN = $(call UPPER_FN, Python_$(subst .,_,$(call PYTHON_VERSION_FN,$(1))))
PYTHON_IMAGE_FN = $(if $(ARCH),$(ARCH)/)python:$(call PYTHON_VERSION_FN,$(1))
PIP_VERSION_FN = $(if $(findstring git+,$(2)),-e $(strip $(2))\#egg=$(strip $(1)),$(strip $(1))==$(strip $(2)))

.PHONY: _help help
help: _help
_help:
	@echo 'usage: make [clean|commit|cover|doc|gh-pages|lint|test|twine]'

.PHONY: commit
commit: test lint doc cover

.PHONY: _clean clean
clean: _clean
_clean:
	rm -rf \
		$(BUILD) \
		.coverage \
		$$(find src -name __pycache__) \
		dist/ \
		src/*.egg-info \
		*.eggs

.PHONY: _superclean superclean
superclean: clean _superclean
_superclean:
ifeq '$(NO_DOCKER)' ''
	-docker rmi -f $(foreach V, $(PYTHON_VERSIONS),$(call PYTHON_IMAGE_FN, $(V)))
endif

# Function to generate venv rules - venv_name, pip_args, commands, *python_version, *docker_run_args
define VENV_RULE_FN
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_DIR := build/venv/$(strip $(1))-python-$(call PYTHON_VERSION_FN,$(4))
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_RUN := $$(if $$(NO_DOCKER),,docker run --rm -u `id -g`:`id -g` -v `pwd`:`pwd` -w `pwd` $(5) $(call PYTHON_IMAGE_FN,$(4)))
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_CMD := $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_RUN) $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_DIR)/bin
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_BUILD := $$(BUILD)/venv/$(strip $(1))-python-$(call PYTHON_VERSION_FN,$(4)).build

$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_BUILD):
ifeq '$$(NO_DOCKER)' ''
	docker pull -q $(call PYTHON_IMAGE_FN,$(4))
endif
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_RUN) python3 -m venv $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_DIR)
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_CMD)/pip -q $$(PIP_ARGS) install $(PIP_INSTALL_ARGS) --upgrade pip setuptools wheel
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_CMD)/pip $$(PIP_ARGS) install $(PIP_INSTALL_ARGS) $$(strip $(2))
	touch $$@

.PHONY: $(strip $(1))-$(subst _,-,$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4))))
$(strip $(1))-$(subst _,-,$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4)))): $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_BUILD)
$(call $(3), $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_CMD))

.PHONY: $(strip $(1))
$(strip $(1)): $(strip $(1))-$(subst _,-,$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4))))
endef

# Generate test rules
define TEST_COMMANDS_FN
	$(1)/python3 -m unittest $$(if $$(TEST),-v $$(TEST),discover -v -t src -s src/tests)$$(if $$(TEST_ARGS), $$(TEST_ARGS))
endef
TEST_RULES_FN = $(call VENV_RULE_FN, test, -e . $$(TESTS_REQUIRE), TEST_COMMANDS_FN, $(1))
$(foreach X, $(PYTHON_VERSIONS), $(eval $(call TEST_RULES_FN, $(X))))
ifneq '$(DUMP_RULES)' ''
$(foreach X, $(PYTHON_VERSIONS), $(info $(call TEST_RULES_FN, $(X))) $(info ))
endif

# Generate coverage rule
define COVER_COMMANDS_FN
	$(1)/python3 -m coverage run --branch --source src -m unittest $$(if $$(TEST),-v $$(TEST),discover -v -t src -s src/tests)$$(if $$(TEST_ARGS), $$(TEST_ARGS))
	$(1)/python3 -m coverage html -d $$(BUILD)/coverage
	$(1)/python3 -m coverage report $$(COVERAGE_REPORT_ARGS)
endef
COVER_RULES := $(call VENV_RULE_FN, cover, -e . $(call PIP_VERSION_FN, coverage, $(COVERAGE_VERSION)) $$(TESTS_REQUIRE), COVER_COMMANDS_FN)
$(eval $(COVER_RULES))
ifneq '$(DUMP_RULES)' ''
$(info $(COVER_RULES))
$(info )
endif

# Generate lint rule
define LINT_COMMANDS_FN
	$(1)/python3 -m pylint $$(PYLINT_ARGS) setup.py src
endef
LINT_RULES := $(call VENV_RULE_FN, lint, -e . $(call PIP_VERSION_FN, pylint, $(PYLINT_VERSION)), LINT_COMMANDS_FN)
$(eval $(LINT_RULES))
ifneq '$(DUMP_RULES)' ''
$(info $(LINT_RULES))
$(info )
endif

# Generate sphinx rule
ifeq '$(SPHINX_DOC)' ''
.PHONY: doc
doc:

.PHONY: gh-pages
gh-pages:
else
define DOC_COMMANDS_FN
	$(1)/sphinx-build $$(SPHINX_ARGS) -b doctest -d $$(BUILD)/doc/doctrees $$(SPHINX_DOC) $$(BUILD)/doc/doctest
	$(1)/sphinx-build $$(SPHINX_ARGS) -b html -d $$(BUILD)/doc/doctrees $$(SPHINX_DOC) $$(BUILD)/doc/html
endef
DOC_RULES := $(call VENV_RULE_FN, doc, -e . \
    $(call PIP_VERSION_FN, sphinx, $(SPHINX_VERSION)) \
    $(call PIP_VERSION_FN, sphinx_rtd_theme, $(SPHINX_RTD_THEME_VERSION)) \
    $(call PIP_VERSION_FN, docutils, $(DOCUTILS_VERSION)), \
    DOC_COMMANDS_FN)
$(eval $(DOC_RULES))
ifneq '$(DUMP_RULES)' ''
$(info $(DOC_RULES))
$(info )
endif

.PHONY: gh-pages
gh-pages: clean doc
	if [ ! -d ../$(notdir $(CURDIR)).gh-pages ]; then git clone -b gh-pages `git config --get remote.origin.url` ../$(notdir $(CURDIR)).gh-pages; fi
	cd ../$(notdir $(CURDIR)).gh-pages && git pull
	rsync -rv --delete --exclude=.git/ $(BUILD)/doc/html/ ../$(notdir $(CURDIR)).gh-pages
endif

# Generate twine rule
.PHONY: twine
twine: commit

define TWINE_COMMANDS_FN
	$(1)/python3 setup.py sdist
	$(1)/twine check dist/*.tar.gz
	$(1)/twine upload dist/*.tar.gz
endef
TWINE_RULES := $(call VENV_RULE_FN, twine, -e . twine, TWINE_COMMANDS_FN,, -i)
$(eval $(TWINE_RULES))
ifneq '$(DUMP_RULES)' ''
$(info $(TWINE_RULES))
$(info )
endif
